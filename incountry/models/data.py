# coding: utf-8

"""
    InCountry

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019-01-15T16:20:14Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custid': 'str',
        'rowid': 'str',
        'blob': 'str',
        'key1': 'str',
        'key2': 'str',
        'key3': 'str',
        'key4': 'str',
        'key5': 'str'
    }

    attribute_map = {
        'custid': 'custid',
        'rowid': 'rowid',
        'blob': 'blob',
        'key1': 'key1',
        'key2': 'key2',
        'key3': 'key3',
        'key4': 'key4',
        'key5': 'key5'
    }

    def __init__(self, custid=None, rowid=None, blob=None, key1=None, key2=None, key3=None, key4=None, key5=None):  # noqa: E501
        """Data - a model defined in Swagger"""  # noqa: E501

        self._custid = None
        self._rowid = None
        self._blob = None
        self._key1 = None
        self._key2 = None
        self._key3 = None
        self._key4 = None
        self._key5 = None
        self.discriminator = None

        self.custid = custid
        if rowid is not None:
            self.rowid = rowid
        self.blob = blob
        if key1 is not None:
            self.key1 = key1
        if key2 is not None:
            self.key2 = key2
        if key3 is not None:
            self.key3 = key3
        if key4 is not None:
            self.key4 = key4
        if key5 is not None:
            self.key5 = key5

    @property
    def custid(self):
        """Gets the custid of this Data.  # noqa: E501


        :return: The custid of this Data.  # noqa: E501
        :rtype: str
        """
        return self._custid

    @custid.setter
    def custid(self, custid):
        """Sets the custid of this Data.


        :param custid: The custid of this Data.  # noqa: E501
        :type: str
        """
#        if custid is None:
#            raise ValueError("Invalid value for `custid`, must not be `None`")  # noqa: E501

        self._custid = custid

    @property
    def rowid(self):
        """Gets the rowid of this Data.  # noqa: E501


        :return: The rowid of this Data.  # noqa: E501
        :rtype: str
        """
        return self._rowid

    @rowid.setter
    def rowid(self, rowid):
        """Sets the rowid of this Data.


        :param rowid: The rowid of this Data.  # noqa: E501
        :type: str
        """

        self._rowid = rowid

    @property
    def blob(self):
        """Gets the blob of this Data.  # noqa: E501


        :return: The blob of this Data.  # noqa: E501
        :rtype: str
        """
        return self._blob

    @blob.setter
    def blob(self, blob):
        """Sets the blob of this Data.


        :param blob: The blob of this Data.  # noqa: E501
        :type: str
        """
#        if blob is None:
#            raise ValueError("Invalid value for `blob`, must not be `None`")  # noqa: E501

        self._blob = blob

    @property
    def key1(self):
        """Gets the key1 of this Data.  # noqa: E501


        :return: The key1 of this Data.  # noqa: E501
        :rtype: str
        """
        return self._key1

    @key1.setter
    def key1(self, key1):
        """Sets the key1 of this Data.


        :param key1: The key1 of this Data.  # noqa: E501
        :type: str
        """

        self._key1 = key1

    @property
    def key2(self):
        """Gets the key2 of this Data.  # noqa: E501


        :return: The key2 of this Data.  # noqa: E501
        :rtype: str
        """
        return self._key2

    @key2.setter
    def key2(self, key2):
        """Sets the key2 of this Data.


        :param key2: The key2 of this Data.  # noqa: E501
        :type: str
        """

        self._key2 = key2

    @property
    def key3(self):
        """Gets the key3 of this Data.  # noqa: E501


        :return: The key3 of this Data.  # noqa: E501
        :rtype: str
        """
        return self._key3

    @key3.setter
    def key3(self, key3):
        """Sets the key3 of this Data.


        :param key3: The key3 of this Data.  # noqa: E501
        :type: str
        """

        self._key3 = key3

    @property
    def key4(self):
        """Gets the key4 of this Data.  # noqa: E501


        :return: The key4 of this Data.  # noqa: E501
        :rtype: str
        """
        return self._key4

    @key4.setter
    def key4(self, key4):
        """Sets the key4 of this Data.


        :param key4: The key4 of this Data.  # noqa: E501
        :type: str
        """

        self._key4 = key4

    @property
    def key5(self):
        """Gets the key5 of this Data.  # noqa: E501


        :return: The key5 of this Data.  # noqa: E501
        :rtype: str
        """
        return self._key5

    @key5.setter
    def key5(self, key5):
        """Sets the key5 of this Data.


        :param key5: The key5 of this Data.  # noqa: E501
        :type: str
        """

        self._key5 = key5

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
