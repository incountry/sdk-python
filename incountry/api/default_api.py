# coding: utf-8

"""
    InCountry

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019-02-19T17:40:44Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from incountry.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_post(self, config, country, rowid, **kwargs):  # noqa: E501
        """delete_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_post(config, country, rowid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str config: (required)
        :param str country: (required)
        :param str rowid: (required)
        :return: Data
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_post_with_http_info(config, country, rowid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_post_with_http_info(config, country, rowid, **kwargs)  # noqa: E501
            return data

    def delete_post_with_http_info(self, config, country, rowid, **kwargs):  # noqa: E501
        """delete_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_post_with_http_info(config, country, rowid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str config: (required)
        :param str country: (required)
        :param str rowid: (required)
        :return: Data
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['config', 'country', 'rowid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'config' is set
        if ('config' not in params or
                params['config'] is None):
            raise ValueError("Missing the required parameter `config` when calling `delete_post`")  # noqa: E501
        # verify the required parameter 'country' is set
        if ('country' not in params or
                params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `delete_post`")  # noqa: E501
        # verify the required parameter 'rowid' is set
        if ('rowid' not in params or
                params['rowid'] is None):
            raise ValueError("Missing the required parameter `rowid` when calling `delete_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'config' in params:
            header_params['config'] = params['config']  # noqa: E501
        if 'country' in params:
            header_params['country'] = params['country']  # noqa: E501
        if 'rowid' in params:
            header_params['rowid'] = params['rowid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Data',  # noqa: E501
            auth_settings=auth_settings,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def keylookup_post(self, config, country, **kwargs):  # noqa: E501
        """keylookup_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.keylookup_post(config, country, async=True)
        >>> result = thread.get()

        :param async bool
        :param str config: (required)
        :param str country: (required)
        :param str key1:
        :param str key2:
        :param str key3:
        :param str key4:
        :param str key5:
        :return: Data
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.keylookup_post_with_http_info(config, country, **kwargs)  # noqa: E501
        else:
            (data) = self.keylookup_post_with_http_info(config, country, **kwargs)  # noqa: E501
            return data

    def keylookup_post_with_http_info(self, config, country, **kwargs):  # noqa: E501
        """keylookup_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.keylookup_post_with_http_info(config, country, async=True)
        >>> result = thread.get()

        :param async bool
        :param str config: (required)
        :param str country: (required)
        :param str key1:
        :param str key2:
        :param str key3:
        :param str key4:
        :param str key5:
        :return: Data
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['config', 'country', 'key1', 'key2', 'key3', 'key4', 'key5']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method keylookup_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'config' is set
        if ('config' not in params or
                params['config'] is None):
            raise ValueError("Missing the required parameter `config` when calling `keylookup_post`")  # noqa: E501
        # verify the required parameter 'country' is set
        if ('country' not in params or
                params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `keylookup_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'config' in params:
            header_params['config'] = params['config']  # noqa: E501
        if 'country' in params:
            header_params['country'] = params['country']  # noqa: E501
        if 'key1' in params:
            header_params['key1'] = params['key1']  # noqa: E501
        if 'key2' in params:
            header_params['key2'] = params['key2']  # noqa: E501
        if 'key3' in params:
            header_params['key3'] = params['key3']  # noqa: E501
        if 'key4' in params:
            header_params['key4'] = params['key4']  # noqa: E501
        if 'key5' in params:
            header_params['key5'] = params['key5']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/keylookup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Data',  # noqa: E501
            auth_settings=auth_settings,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lookup_post(self, config, country, **kwargs):  # noqa: E501
        """lookup_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lookup_post(config, country, async=True)
        >>> result = thread.get()

        :param async bool
        :param str config: (required)
        :param str country: (required)
        :param str key1:
        :param str key2:
        :param str key3:
        :param str key4:
        :param str key5:
        :return: Data
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.lookup_post_with_http_info(config, country, **kwargs)  # noqa: E501
        else:
            (data) = self.lookup_post_with_http_info(config, country, **kwargs)  # noqa: E501
            return data

    def lookup_post_with_http_info(self, config, country, **kwargs):  # noqa: E501
        """lookup_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.lookup_post_with_http_info(config, country, async=True)
        >>> result = thread.get()

        :param async bool
        :param str config: (required)
        :param str country: (required)
        :param str key1:
        :param str key2:
        :param str key3:
        :param str key4:
        :param str key5:
        :return: Data
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['config', 'country', 'key1', 'key2', 'key3', 'key4', 'key5']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lookup_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'config' is set
        if ('config' not in params or
                params['config'] is None):
            raise ValueError("Missing the required parameter `config` when calling `lookup_post`")  # noqa: E501
        # verify the required parameter 'country' is set
        if ('country' not in params or
                params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `lookup_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'config' in params:
            header_params['config'] = params['config']  # noqa: E501
        if 'country' in params:
            header_params['country'] = params['country']  # noqa: E501
        if 'key1' in params:
            header_params['key1'] = params['key1']  # noqa: E501
        if 'key2' in params:
            header_params['key2'] = params['key2']  # noqa: E501
        if 'key3' in params:
            header_params['key3'] = params['key3']  # noqa: E501
        if 'key4' in params:
            header_params['key4'] = params['key4']  # noqa: E501
        if 'key5' in params:
            header_params['key5'] = params['key5']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/lookup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Data',  # noqa: E501
            auth_settings=auth_settings,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_post(self, config, country, rowid, **kwargs):  # noqa: E501
        """read_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read_post(config, country, rowid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str config: (required)
        :param str country: (required)
        :param str rowid: (required)
        :return: Data
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.read_post_with_http_info(config, country, rowid, **kwargs)  # noqa: E501
        else:
            (data) = self.read_post_with_http_info(config, country, rowid, **kwargs)  # noqa: E501
            return data

    def read_post_with_http_info(self, config, country, rowid, **kwargs):  # noqa: E501
        """read_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.read_post_with_http_info(config, country, rowid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str config: (required)
        :param str country: (required)
        :param str rowid: (required)
        :return: Data
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['config', 'country', 'rowid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'config' is set
        if ('config' not in params or
                params['config'] is None):
            raise ValueError("Missing the required parameter `config` when calling `read_post`")  # noqa: E501
        # verify the required parameter 'country' is set
        if ('country' not in params or
                params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `read_post`")  # noqa: E501
        # verify the required parameter 'rowid' is set
        if ('rowid' not in params or
                params['rowid'] is None):
            raise ValueError("Missing the required parameter `rowid` when calling `read_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'config' in params:
            header_params['config'] = params['config']  # noqa: E501
        if 'country' in params:
            header_params['country'] = params['country']  # noqa: E501
        if 'rowid' in params:
            header_params['rowid'] = params['rowid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/read', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Data',  # noqa: E501
            auth_settings=auth_settings,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def write_post(self, config, country, rowid, blob, **kwargs):  # noqa: E501
        """write_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.write_post(config, country, rowid, blob, async=True)
        >>> result = thread.get()

        :param async bool
        :param str config: (required)
        :param str country: (required)
        :param str rowid: (required)
        :param str blob: (required)
        :param str key1:
        :param str key2:
        :param str key3:
        :param str key4:
        :param str key5:
        :return: Data
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.write_post_with_http_info(config, country, rowid, blob, **kwargs)  # noqa: E501
        else:
            (data) = self.write_post_with_http_info(config, country, rowid, blob, **kwargs)  # noqa: E501
            return data

    def write_post_with_http_info(self, config, country, rowid, blob, **kwargs):  # noqa: E501
        """write_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.write_post_with_http_info(config, country, rowid, blob, async=True)
        >>> result = thread.get()

        :param async bool
        :param str config: (required)
        :param str country: (required)
        :param str rowid: (required)
        :param str blob: (required)
        :param str key1:
        :param str key2:
        :param str key3:
        :param str key4:
        :param str key5:
        :return: Data
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['config', 'country', 'rowid', 'blob', 'key1', 'key2', 'key3', 'key4', 'key5']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method write_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'config' is set
        if ('config' not in params or
                params['config'] is None):
            raise ValueError("Missing the required parameter `config` when calling `write_post`")  # noqa: E501
        # verify the required parameter 'country' is set
        if ('country' not in params or
                params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `write_post`")  # noqa: E501
        # verify the required parameter 'rowid' is set
        if ('rowid' not in params or
                params['rowid'] is None):
            raise ValueError("Missing the required parameter `rowid` when calling `write_post`")  # noqa: E501
        # verify the required parameter 'blob' is set
        if ('blob' not in params or
                params['blob'] is None):
            raise ValueError("Missing the required parameter `blob` when calling `write_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'config' in params:
            header_params['config'] = params['config']  # noqa: E501
        if 'country' in params:
            header_params['country'] = params['country']  # noqa: E501
        if 'rowid' in params:
            header_params['rowid'] = params['rowid']  # noqa: E501
        if 'blob' in params:
            header_params['blob'] = params['blob']  # noqa: E501
        if 'key1' in params:
            header_params['key1'] = params['key1']  # noqa: E501
        if 'key2' in params:
            header_params['key2'] = params['key2']  # noqa: E501
        if 'key3' in params:
            header_params['key3'] = params['key3']  # noqa: E501
        if 'key4' in params:
            header_params['key4'] = params['key4']  # noqa: E501
        if 'key5' in params:
            header_params['key5'] = params['key5']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/write', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Data',  # noqa: E501
            auth_settings=auth_settings,
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
